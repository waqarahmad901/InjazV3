@using TranningWebApp.Resource
@model TranningWebApp.Repository.DataAccess.session
@using TmsWebApp.Common;
@using TranningWebApp.Common
@{

    var cu = Session["user"] as ContextUser;
} 
<script src="~/Scripts/jquery.timepicker.min.js"></script>
<link href="~/Content/jquery.timepicker.min.css" rel="stylesheet" />
<script type="text/javascript">
    $(document).ready(function () {
        var role = "@cu.EnumRole";
        debugger;
        if (role.toLocaleLowerCase() == "coordinator") {
            if ("@Model.Status" == "Pending") {
                $('input').not("#@Html.IdFor(x=>x.ActualDateString)").not("#@Html.IdFor(x=>x.ActualDateStringStringIslamic)").not("#@Html.IdFor(x=>x.Id)").attr("disabled", "disabled");
                $(".check").parent().hide();
                bindDatedLocal();
            }
            if ("@Model.Status" == "Approved") {
                $('input').not("#@Html.IdFor(x=>x.Id)").attr("disabled", "disabled");
                if ("@Model.SendKitByMailCourier" == "True") {
                    $("#@Html.IdFor(x=>x.ConfirmKitReceivedBySchool)").removeAttr("disabled");
                }

                $("#@Html.IdFor(x=>x.SendKitByMailCourier)").attr("disabled", "disabled");
                $("#@Html.IdFor(x=>x.ApprovedByAdmin)").attr("disabled", "disabled");
                $("#@Html.IdFor(x=>x.SessionOccured)").parent().hide();
                $("#@Html.IdFor(x=>x.MarkedCompletedByVolunteer)").parent().hide();
            }
            if ("@Model.Status" == "Occured") {
                $('input').not("#@Html.IdFor(x=>x.Id)").not("#@Html.IdFor(x=>x.EvaluationImageLink)").not("#@Html.IdFor(x=>x.SessionImageLink)").attr("disabled", "disabled");
                $('select').attr("disabled", "disabled");
            }

            $('select').attr("disabled", "disabled");
        }
        if (role.toLocaleLowerCase() == "superadmin") {
            if ("@Model.Status" == "DateChanges") {
                $('input').not("#@Html.IdFor(x=>x.Id)").not("#@Html.IdFor(x=>x.SendKitByMailCourier)").attr("disabled", "disabled");
                $('select').attr("disabled", "disabled");
                $("#@Html.IdFor(x=>x.ConfirmKitReceivedBySchool)").parent().hide();
                $("#@Html.IdFor(x=>x.ApprovedByAdmin)").parent().hide();
                $("#@Html.IdFor(x=>x.SessionOccured)").parent().hide();
                $("#@Html.IdFor(x=>x.MarkedCompletedByVolunteer)").parent().hide();
            }
            if ("@Model.Status" == "Pending") {
                $("#@Html.IdFor(x=>x.ActualDateString)").parent().hide();
                $("#@Html.IdFor(x=>x.ActualDateStringStringIslamic)").parent().hide();
                $(".check").parent().hide();
            }
            if ("@Model.Status" == "Approved") {
                $('input').not("#@Html.IdFor(x => x.Id)").attr("disabled", "disabled");
                $('select').attr("disabled", "disabled");
                $("#@Html.IdFor(x => x.SessionOccured)").parent().hide();
                $("#@Html.IdFor(x => x.MarkedCompletedByVolunteer)").parent().hide();
            }
            if ("@Model.Status" == "Occured") {
                $('input').not("#@Html.IdFor(x=>x.Id)").attr("disabled", "disabled");
                $('select').attr("disabled", "disabled");
            }
        }
        if (role.toLocaleLowerCase() == "volunteer") {
            $('input').not("#@Html.IdFor(x=>x.Id)").not("#@Html.IdFor(x => x.RequestThisSession)").attr("disabled", "disabled");
            $('select').attr("disabled", "disabled");
            $("#@Html.IdFor(x=>x.ConfirmKitReceivedBySchool)").parent().hide();
            $("#@Html.IdFor(x=>x.ApprovedByAdmin)").parent().hide();
            $("#@Html.IdFor(x=>x.SessionOccured)").parent().hide();
            $("#@Html.IdFor(x => x.SendKitByMailCourier)").parent().hide();
            $("#@Html.IdFor(x => x.MarkedCompletedByVolunteer)").parent().hide();
            if ("@Model.Status" == "Occured") {
                $("#@Html.IdFor(x => x.VolunteerMarkedStudentAttendenceInSession)").removeAttr("disabled");
            }
        }
        if (role.toLocaleLowerCase() == "participant") {
            $('input').not("#@Html.IdFor(x=>x.Id)").attr("disabled", "disabled");
            $('select').attr("disabled", "disabled");
            $(".check").parent().hide();
        }

    });
    function changeDate() {
        $("#@Html.IdFor(x => x.ActualDateString)").removeAttr("disabled");
        $("#@Html.IdFor(x => x.ActualDateStringStringIslamic)").removeAttr("disabled");
        bindDatedLocal();
    }

    function bindDatedLocal() {
        $("#@Html.IdFor(x => x.ActualDateStringStringIslamic)").calendarsPicker({
            calendar: $.calendars.instance('islamic'),
            dateFormat: 'MM d, yyyy',
            onSelect: function (dates) {
                var dateselect = dates[0]._day + "-" + dates[0]._month + "-" + dates[0]._year;
                var control = $(this);
                $.get("/Home/ConvertDateCalendar?dateConv=" + dateselect + "&calendar=Gregorian&dateLangCulture=en-us", function (res) {
                    control.parent().parent().find("#@Html.IdFor(x => x.ActualDateString)").val(res);
                });
            }
        });

        $("#@Html.IdFor(x => x.ActualDateString)").calendarsPicker({
            calendar: $.calendars.instance('gregorian'),
            dateFormat: 'dd/mm/yyyy',
            onSelect: function (dates) {
                // $('.date-islamic').val(writeIslamicDate(dates[0]._day, dates[0]._month - 1, dates[0]._year);
                var dateselect = dates[0]._day + "-" + dates[0]._month + "-" + dates[0]._year;
                var control = $(this);
                $.get("/Home/ConvertDateCalendar?dateConv=" + dateselect + "&calendar=Hijri&dateLangCulture=en-us", function (res) {
                    control.parent().parent().find("#@Html.IdFor(x => x.ActualDateStringStringIslamic)").val(res);
                });

            }
        });
    }
     

</script>

<main class="main">

    <!-- Breadcrumb -->
    <ol class="breadcrumb">
        <li class="breadcrumb-item">@General.Home</li>
        <li class="breadcrumb-item">@SessionX.Session</li>
        </li>
        @if (Model.Id > 0)
        {
            <li class="breadcrumb-item active"> @General.Edit @Menu.Session</li>
        }
        else
        {
            <li class="breadcrumb-item active"> @SessionX.Addnewsession</li>
        }
    </ol>

    <div class="container-fluid">
        <div class="animated fadeIn">
            <div class="col-sm-6">
                @using (Html.BeginForm("Edit", "Session", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken();
                    <div class="card">
                        <div class="card-header">

                            @if (Model.EnumSessionStatus == SessionStatus.Occured)
                            {
                                <strong class="text-primary"><i class="icon-plus"></i> @SessionX.SessionDetail</strong>

                            }
                            else if (Model.Id > 0)
                            {
                                <strong class="text-primary"><i class="icon-plus"></i> @General.Edit @Menu.Session</strong>

                            }
                            else
                            {
                                <strong class="text-primary"><i class="icon-plus"></i> @SessionX.Addnewsession</strong>

                            }
                        </div>
                        <div class="card-block">


                            <div class="form-group">
                                <label for="phone" ,@maxlength=10>@SessionX.ProgramName</label>
                                @Html.TextBoxFor(m => m.ProgramName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.ProgramName, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group" style="display:none">
                                <label for="name">@SessionX.ProgramPurpose</label>
                                @Html.TextBoxFor(m => m.ProgramPurpose, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.ProgramPurpose, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group">
                                <label for="mobile">@SessionX.TargetGroup </label>
                                @Html.TextBoxFor(m => m.TargetGroup, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.TargetGroup, "", new { @class = "text-danger" })

                            </div>
                            <div class="form-group">
                                <label>@Volunteer.Gender</label>
                                @Html.DropDownListFor(m => m.Gender, (List<SelectListItem>)ViewBag.genderdd, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                <label for="country">@Coordinator.City</label>
                                @Html.DropDownListFor(m => m.City, (List<SelectListItem>)ViewBag.citiesdd, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                <label for="country">@General.Country</label>
                                @Html.DropDownListFor(m => m.Country, (List<SelectListItem>)ViewBag.countries, new { @class = "form-control", @onchange = "changecountry(this)" })
                            </div>
                            <div class="form-group">
                                <label for="country">@SessionX.School</label>
                                @Html.DropDownListFor(m => m.SchoolID, (List<SelectListItem>)ViewBag.school, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.SchoolID, "", new { @class = "text-danger" })

                            </div>

                            @if (Model.Id > 0 && cu.EnumRole == EnumUserRole.Coordinator && (Model.Status == SessionStatus.Approved.ToString()))
                            {
                                <div class="form-group">
                                    <label for="country">@SessionX.School</label>
                                    @Html.DropDownListFor(m => m.SchoolID, (List<SelectListItem>)ViewBag.school, new { @class = "form-control disabled" })
                                    @Html.ValidationMessageFor(m => m.SchoolID, "", new { @class = "text-danger" })

                                </div>
                            }


                            <div class="form-group">
                                <label for="mobile">@SessionX.Volunteer </label>
                                @Html.DropDownListFor(m => m.VolunteerId, (List<SelectListItem>)ViewBag.volunteer, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.VolunteerId, "", new { @class = "text-danger" })

                            </div>

                            @if (cu.EnumRole == EnumUserRole.SuperAdmin)
                            {
                                <div class="form-group">
                                    <label for="mobile">@SessionX.StudentCertificate </label>
                                    @Html.DropDownListFor(m => m.StudentCertificate, (List<SelectListItem>)ViewBag.certificatesStudent, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.StudentCertificate, "", new { @class = "text-danger" })


                                </div>

                                <div class="form-group">
                                    <label for="mobile">@SessionX.VolunteerCertificate </label>
                                    @Html.DropDownListFor(m => m.VolunteerCertificate, (List<SelectListItem>)ViewBag.certificatesVolunteer, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.VolunteerCertificate, "", new { @class = "text-danger" })

                                </div>
                                <div class="form-group">
                                    <label for="mobile">@SessionX.StudentEvaluation </label>
                                    @Html.DropDownListFor(m => m.StudentEvaluationCatagory, (List<SelectListItem>)ViewBag.evaluationCatagory, new { @class = "form-control" })
                                </div>
                            }
                            <div class="row">
                                <div class="form-group col-sm-6">
                                    <label style="width: 100%">@SessionX.SchoolProposedDate</label>
                                    <label style="font-style: italic">@Coordinator.Gorgian</label>
                                    @Html.TextBoxFor(m => m.PropesedDateString, new { @class = "form-control date startDate", @value = Model.ProposedDateTime.ToString("dd/MM/yyyy") })
                                    @Html.ValidationMessageFor(m => m.PropesedDateString, "", new { @class = "text-danger" })


                                </div>
                                <div class="form-group col-sm-6" style="margin-top:0.5%">
                                    <label style="width: 100%"></label>
                                    <label style="font-style: italic">@SessionX.Hijri</label>
                                    @Html.TextBoxFor(m => m.PropesedDateStringIslamic, new { @class = "form-control date-islamic startDateIslamic", @value = Model.ProposedDateTime.ToString("dd/MM/yyyy") })
                                    @Html.ValidationMessageFor(m => m.PropesedDateStringIslamic, "", new { @class = "text-danger" })


                                </div>
                            </div>

                            <div class="row">
                                <div class="form-group col-sm-6">
                                    <label style="width: 100%">Propsed End Date</label>
                                    <label style="font-style: italic">@Coordinator.Gorgian</label>
                                    @Html.TextBoxFor(m => m.ProposedEndDateTime, "{0:dd/MM/yyyy}", new { @class = "form-control date enddate" })
                                    @Html.ValidationMessageFor(m => m.ProposedEndDateTime, "", new { @class = "text-danger" })


                                </div>
                                <div class="form-group col-sm-6" style="margin-top:0.5%">
                                    <label style="width: 100%"></label>
                                    <label style="font-style: italic">@SessionX.Hijri</label>
                                    @Html.TextBoxFor(m => m.PropesedEndDateStringIslamic, new { @class = "form-control date-islamic enddateIslamic" })
                                    @Html.ValidationMessageFor(m => m.PropesedEndDateStringIslamic, "", new { @class = "text-danger" })


                                </div>
                            </div>

                            <div id="timeControl" style="background-color:#ddd; width:100%" class="pull-left">
                                <div class="form-group firstRow col-sm-12">
                                    <div class="col-sm-2" style="padding:0px">
                                        Holiday
                                    </div>
                                    <div class="col-sm-2" style="padding:0px">
                                        Day
                                    </div>
                                    <div class="col-sm-4">
                                        From
                                    </div>
                                    <div class="col-sm-4">
                                        To
                                    </div>
                                </div>
                            </div>


                            @if (Model.Id > 0)
                            {

                                <div class="row">
                                    <div class="form-group col-sm-6">
                                        <label style="width: 100%">@SessionX.RequestedDate</label>
                                        <label style="font-style: italic">@Coordinator.Gorgian</label>
                                        @Html.TextBoxFor(m => m.ActualDateString, new { @class = "form-control date-1", @value = Model.ProposedDateTime.ToString("dd/MM/yyyy") })
                                        @Html.ValidationMessageFor(m => m.ActualDateString, "", new { @class = "text-danger" })


                                    </div>
                                    <div class="form-group col-sm-6" style="margin-top:0.5%">
                                        <label style="width: 100%"></label>
                                        <label style="font-style: italic">@SessionX.Hijri</label>
                                        @Html.TextBoxFor(m => m.ActualDateStringStringIslamic, new { @class = "form-control date-islamic-1", @placeholder = "Enter Proposed Date", @value = Model.ProposedDateTime.ToString("dd/MM/yyyy") })
                                        @Html.ValidationMessageFor(m => m.ActualDateStringStringIslamic, "", new { @class = "text-danger" })


                                    </div>
                                </div>
                                if (Model.ChangeDateVisible)
                                {
                                    <button type="button" class="btn btn-sm btn-primary pull-right" onclick="changeDate()">@SessionX.ChangeDate</button>
                                }
                                <div class="form-group">
                                    @Html.CheckBoxFor(x => x.ApprovedByAdmin, new { @style = "margin-top:5px", @class = "check" })
                                    <label style="margin-left:10px">@SessionX.ApprovedbyAdmin</label>
                                </div>
                                <div class="form-group">
                                    @Html.CheckBoxFor(x => x.SendKitByMailCourier, new { @style = "margin-top:5px", @class = "check" })
                                    <label style="margin-left:10px">@SessionX.SendthekitbyMailCourier</label>
                                </div>
                                <div class="form-group">
                                    @Html.CheckBoxFor(x => x.ConfirmKitReceivedBySchool, new { @style = "margin-top:5px", @class = "check" })
                                    <label style="margin-left:10px">@SessionX.ConfirmKitReceivedBySchool</label>
                                </div>
                                <div class="form-group">
                                    @Html.CheckBoxFor(x => x.SessionOccured, new { @style = "margin-top:5px", @class = "check" })
                                    <label style="margin-left:10px">@SessionX.Sessionhasoccured</label>
                                </div>
                                <div class="form-group">
                                    @Html.CheckBoxFor(x => x.MarkedCompletedByVolunteer, new { @style = "margin-top:5px", @class = "check" })
                                    <label style="margin-left:10px">@SessionX.Sessionmarkedcompletedbyvolunteer</label>
                                </div>
                                @*if (cu.EnumRole == EnumUserRole.Volunteer && Model.EnumSessionStatus == SessionStatus.Approved)
                                    {
                                    <div class="form-group">
                                        @Html.CheckBoxFor(x=>x.RequestThisSession, new { @style = "margin-top:5px", @class = "check",@value = (Model.VolunteerId != null).ToString().ToLower() })
                                        <label style="margin-left:10px">@SessionX.RequestThisSession</label>
                                    </div>
                                     }*@
                            if (cu.EnumRole == EnumUserRole.Volunteer && Model.EnumSessionStatus == SessionStatus.Occured)
                            {
                                <div class="form-group">
                                    @*@Html.CheckBoxFor(x=>x.VolunteerMarkedStudentAttendenceInSession, new { @style = "margin-top:5px", @class = "check" })*@
                                    @*<label style="margin-left:10px">@SessionX.StudnetAttendence</label>*@
                                </div>
                                }
                            }
                            @if (Model != null && Model.Id > 0)
                            {
                                <input type="hidden" id="Id" name="Id" value="@Model.Id" />

                            }
                            @Html.HiddenFor(x => x.IsActive)
                        </div>
                        <div class="card-footer">
                            @if (cu.EnumRole == EnumUserRole.SuperAdmin && Model.Status == SessionStatus.DateChanges.ToString())
                            {
                                <button type="submit" class="btn btn-sm btn-primary pull-right" name="SubmitButton" value="approved"><i class="fa fa-dot-circle-o"></i> @SessionX.Approved</button>
                                @*<button type="submit" class="btn btn-sm btn-danger pull-right" style="margin-right:5%" name="SubmitButton" value="reject"><i class="fa fa-dot-circle-o"></i> Reject</button>*@

                            }
                            else if (cu.EnumRole == EnumUserRole.Volunteer && Model.EnumSessionStatus == SessionStatus.Approved)
                            {
                                if (Model.VolunteerId == null)
                                {
                                    <button type="submit" class="btn btn-sm btn-primary pull-right" name="SubmitButton" value="request"><i class="ffa-dot-circle-o"></i> @SessionX.AssignThisSession</button>
                                }
                            }
                            else if (cu.EnumRole == EnumUserRole.Volunteer && Model.EnumSessionStatus == SessionStatus.Occured)
                            {

                                if (Model.VolunteerMarkedStudentAttendenceInSession && Model.MarkedCompletedByCoordinator)
                                {
                                    <button type="submit" class="btn btn-sm btn-primary pull-right" name="SubmitButton" value="volunteerviewcertificate"><i class="ffa-dot-circle-o"></i> @SessionX.ViewCertificate</button>
                                    if (!Model.IsFilledVolunteer)
                                    {
                                        <button type="submit" class="btn btn-sm btn-primary pull-right" name="SubmitButton" style="margin-right: 5%" value="coordinatorform"><i class="ffa-dot-circle-o"></i> @SessionX.FillUpCoordinatorForm</button>
                                    }
                                }
                                if (!Model.VolunteerMarkedStudentAttendenceInSession)
                                {
                                    <button type="submit" class="btn btn-sm btn-primary pull-right" name="SubmitButton" value="confirm"><i class="ffa-dot-circle-o"></i> @SessionX.StudentAttendense</button>

                                }
                            }
                            else if (cu.EnumRole == EnumUserRole.Participant)
                            {
                                if (Model != null && Model.EvaluationFormFilled)
                                {
                                    <button type="submit" class="btn btn-sm btn-primary pull-right" name="SubmitButton" value="viewcertificate"><i class="ffa-dot-circle-o"></i> @SessionX.ViewCertificate</button>
                                    <button type="submit" class="btn btn-sm btn-primary pull-right" name="SubmitButton" style="margin-right: 5%" value="feedback"><i class="ffa-dot-circle-o"></i> @SessionX.FeedBack</button>
                                }
                                else
                                {
                                    if (!Model.IsPreFilledByStudent)
                                    {
                                        <button type="submit" class="btn btn-sm btn-primary pull-right" name="SubmitButton" value="submitpre"><i class="ffa-dot-circle-o"></i> @SessionX.SubmitPreEvaluation</button>
                                    }
                                    if (Model.IsAttendenseMarked && !Model.IsPostFilledByStudent)
                                    {
                                        <button type="submit" class="btn btn-sm btn-primary pull-right" name="SubmitButton" style="margin-right: 5%" value="submitpost"><i class="ffa-dot-circle-o"></i> @SessionX.SubmitPostEvaluation</button>
                                    }
                                }

                            }

                            else if (Model.Status != SessionStatus.Occured.ToString())
                            {
                                <button type="submit" class="btn btn-sm btn-primary pull-right"><i class="fa fa-dot-circle-o"></i>@SessionX.Submit</button>
                            }
                        </div>

                    </div>

                }

            </div>
            @if (Model.Status == SessionStatus.Occured.ToString() && cu.EnumRole == EnumUserRole.Coordinator)
            {
                @Html.Partial("_SessionOccured", Model);
            }
        </div>
    </div>

</main>

<div class="remodal" data-remodal-id="modal">
    <button data-remodal-action="close" class="remodal-close"></button>

    <div class="container-fluid">
        <div class="animated fadeIn">
            <div id="detialMapping"></div>
        </div>
    </div>
</div>
